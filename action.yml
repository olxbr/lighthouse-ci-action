name: "Lighthouse CI Action"
description: "Audit URLs using Lighthouse and test performance with Lighthouse CI"
inputs:
  urls:
    description: "List of URL(s) to analyze"
  budgetPath:
    description: "Path to a Lighthouse budgets.json file"
  configPath:
    description: "Path to a LHCI lighthouserc.json file"
  uploadArtifacts:
    description: "Opt-out of saving Lighthouse results as an action artifacts"
  artifactName:
    description: "Name of the artifact group if using uploadArtifacts. default: lighthouse-results"
    default: lighthouse-results
  temporaryPublicStorage:
    description: "Opt-in to saving Lighthouse results to temporary public storage"
  runs:
    description: "Number of runs to do per URL"
  serverBaseUrl:
    description: "Address of a LHCI server"
  serverToken:
    description: "API token to push to LHCI server"
  basicAuthUsername:
    description: "Basic auth username for LHCI server"
  basicAuthPassword:
    description: "Basic auth password for LHCI server"
  gh_token:
    description: "PAT to comment on PR"
  comment_on_pr:
    default: true
    description: "Boolean to define if will comment on PR or not"
outputs:
  resultsPath:
    description: "Path to the folder with LHCI results"
    value: ${{ steps.treosh-lhci-action.outputs.resultsPath }}
  links:
    description: "Links to compare/result UI for each URL (content of links.json)"
    value: ${{ steps.treosh-lhci-action.outputs.links }}
  assertionResults:
    description: "Assertion results (content of assertion-results.json)"
    value: ${{ steps.treosh-lhci-action.outputs.assertionResults }}
runs:
  using: "composite"
  steps:
    - name: Treosh Lighthouse CI Action
      id: treosh-lhci-action
      uses: treosh/lighthouse-ci-action@v9
      with:
        urls: ${{ inputs.urls }}
        budgetPath: ${{ inputs.budgetPath }}
        configPath: ${{ inputs.configPath }}
        uploadArtifacts: ${{ inputs.uploadArtifacts }}
        artifactName: ${{ inputs.artifactName }}
        temporaryPublicStorage: ${{ inputs.temporaryPublicStorage }}
        runs: ${{ inputs.runs }}
        serverBaseUrl: ${{ inputs.serverBaseUrl }}
        serverToken: ${{ inputs.serverToken }}
        basicAuthUsername: ${{ inputs.basicAuthUsername }}
        basicAuthPassword: ${{ inputs.basicAuthPassword }}
    - name: Print outputs
      shell: bash
      run: |

        ## Load json to print metrics
        JSON='${{ steps.treosh-lhci-action.outputs.manifest }}'
        
        ## Load common functions
        source ./scripts/utils

        _log "#########################"
        _log "### Average of ${C_WHT}${{ inputs.runs }}${C_END} runs ###"
        _log "#########################"

        ## Summary (AVG)
        avg_performance=$(jq -r '.[].summary.performance'         <<< $JSON | awk '{ sum+=$1; qtd+=1 } END {print (sum/qtd)*100}' || echo '-')
        avg_accessibility=$(jq -r '.[].summary.accessibility'     <<< $JSON | awk '{ sum+=$1; qtd+=1 } END {print (sum/qtd)*100}' || echo '-')
        avg_best_practices=$(jq -r '.[].summary."best-practices"' <<< $JSON | awk '{ sum+=$1; qtd+=1 } END {print (sum/qtd)*100}' || echo '-')
        avg_seo=$(jq -r '.[].summary.seo'                         <<< $JSON | awk '{ sum+=$1; qtd+=1 } END {print (sum/qtd)*100}' || echo '-')
        avg_pwa=$(jq -r '.[].summary.pwa'                         <<< $JSON | awk '{ sum+=$1; qtd+=1 } END {print (sum/qtd)*100}' || echo '-')
        
        _log "ðŸ…¢ Summary"
        _log "â€‰â€‰â€‰â”œâŽ¯âŽ¯Performance: $(_summaryColor $avg_performance)"
        _log "â€‰â€‰â€‰â”œâŽ¯âŽ¯Accessibility: $(_summaryColor $avg_accessibility)"
        _log "â€‰â€‰â€‰â”œâŽ¯âŽ¯Best practices: $(_summaryColor $avg_best_practices)"
        _log "â€‰â€‰â€‰â”œâŽ¯âŽ¯SEO: $(_summaryColor $avg_seo)"
        _log "â€‰â€‰â€‰â””âŽ¯âŽ¯PWA: $(_summaryColor $avg_pwa)"

        ## Metrics (AVG)
        list_json_path=$(jq -r '.[].jsonPath' <<< $JSON)
        hash_avg_metrics=(firstContentfulPaint:0 
                          largestContentfulPaint:0 
                          interactive:0 
                          speedIndex:0 
                          totalBlockingTime:0
                          totalCumulativeLayoutShift:0)

        for file in $list_json_path; do
          _log "Get info from file $file..."
          
          ## Get all metrics
          for metric_name in ${hash_avg_metrics[@]}; do
            _log ${metric_name%:*}
            jq -r ".audits.metrics.details.items[].${metric_name%:*} | select (.!=null)" <<< $(cat $file)
          done
        done
        
        _log "ðŸ…œ Metrics"
        
        ## Exporting variables
        lighthouse_link=$(jq -r '.[]' <<< '${{ steps.treosh-lhci-action.outputs.links }}')
        echo "lighthouse_link=${lighthouse_link}" >> $GITHUB_ENV
        echo "avg_performance=${avg_performance}" >> $GITHUB_ENV
        echo "avg_accessibility=${avg_accessibility}" >> $GITHUB_ENV
        echo "avg_best_practices=${avg_best_practices}" >> $GITHUB_ENV
        echo "avg_seo=${avg_seo}" >> $GITHUB_ENV
        echo "avg_pwa=${avg_pwa}" >> $GITHUB_ENV


    - name: Coment on PR
      if: ${{ inputs.comment_on_pr }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh_token }}
        PR_NUMBER: ${{ github.event.number }}
      run: |
        cd ${{github.action_path}}
        bash scripts/post_pr_comment.sh
