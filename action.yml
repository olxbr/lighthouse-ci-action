name: "Lighthouse CI Action"
description: "Audit URLs using Lighthouse and test performance with Lighthouse CI"
inputs:
  urls:
    description: "List of URL(s) to analyze"
  budgetPath:
    description: "Path to a Lighthouse budgets.json file"
  configPath:
    description: "Path to a LHCI lighthouserc.json file"
  uploadArtifacts:
    description: "Opt-out of saving Lighthouse results as an action artifacts"
  artifactName:
    description: "Name of the artifact group if using uploadArtifacts. default: lighthouse-results"
    default: lighthouse-results
  temporaryPublicStorage:
    description: "Opt-in to saving Lighthouse results to temporary public storage"
  runs:
    description: "Number of runs to do per URL"
  serverBaseUrl:
    description: "Address of a LHCI server"
  serverToken:
    description: "API token to push to LHCI server"
  basicAuthUsername:
    description: "Basic auth username for LHCI server"
  basicAuthPassword:
    description: "Basic auth password for LHCI server"
outputs:
  resultsPath:
    description: "Path to the folder with LHCI results"
    value: ${{ steps.treosh-lhci-action.outputs.resultsPath }}
  links:
    description: "Links to compare/result UI for each URL (content of links.json)"
    value: ${{ steps.treosh-lhci-action.outputs.links }}
  assertionResults:
    description: "Assertion results (content of assertion-results.json)"
    value: ${{ steps.treosh-lhci-action.outputs.assertionResults }}
runs:
  using: "composite"
  steps:
    - name: Treosh Lighthouse CI Action
      id: treosh-lhci-action
      uses: treosh/lighthouse-ci-action@v9
      with:
        urls: ${{ inputs.urls }}
        budgetPath: ${{ inputs.budgetPath }}
        configPath: ${{ inputs.configPath }}
        uploadArtifacts: ${{ inputs.uploadArtifacts }}
        artifactName: ${{ inputs.artifactName }}
        temporaryPublicStorage: ${{ inputs.temporaryPublicStorage }}
        runs: ${{ inputs.runs }}
        serverBaseUrl: ${{ inputs.serverBaseUrl }}
        serverToken: ${{ inputs.serverToken }}
        basicAuthUsername: ${{ inputs.basicAuthUsername }}
        basicAuthPassword: ${{ inputs.basicAuthPassword }}
    - name: Print outputs
      shell: bash
      run: |

        ## Colors
        ESC_SEQ='\033['
        C_END=$ESC_SEQ'0m'
        C_GRE=$ESC_SEQ'1;32m'
        C_YEL=$ESC_SEQ'1;33m'
        C_RED=$ESC_SEQ'1;31m'
        C_WHT=$ESC_SEQ'1;37m'
        
        function _log() {
          case $1 in
            erro) logLevel="${C_RED}[ERRO]${C_END}";;
            warn) logLevel="${C_YEL}[WARN]${C_END}";;
            *)    logLevel="${C_WHT}[INFO]${C_END}";;
          esac
          
          msg=$( (($#>1)) && echo ${2} || echo ${1} )

          echo -e "$(date +"%d-%b-%Y %H:%M:%S") ${logLevel} - ${msg}"
        }
        
        function _summaryColor() {
            (($1 > 89))            && printf "${C_GRE} $1 ${C_END}"
            (($1 < 90 && $1 > 49)) && printf "${C_YEL} $1 ${C_END}"
            printf "${C_RED} $1 ${C_END}"
        }

        _log "#########################"
        _log "### Average of ${C_WHT}${{ inputs.runs }}${C_END} runs ###"
        _log "#########################"
        
        ## Summary (AVG)
        avg_performance=$(jq -r '.[].summary.performance'         <<< '${{ steps.treosh-lhci-action.outputs.manifest }}' | awk '{ sum+=$1; qtd+=1 } END {print (sum/qtd)*100"%"}' || echo '-')
        avg_accessibility=$(jq -r '.[].summary.accessibility'     <<< '${{ steps.treosh-lhci-action.outputs.manifest }}' | awk '{ sum+=$1; qtd+=1 } END {print (sum/qtd)*100"%"}' || echo '-')
        avg_best_practices=$(jq -r '.[].summary."best-practices"' <<< '${{ steps.treosh-lhci-action.outputs.manifest }}' | awk '{ sum+=$1; qtd+=1 } END {print (sum/qtd)*100"%"}' || echo '-')
        avg_seo=$(jq -r '.[].summary.seo'                         <<< '${{ steps.treosh-lhci-action.outputs.manifest }}' | awk '{ sum+=$1; qtd+=1 } END {print (sum/qtd)*100"%"}' || echo '-')
        avg_pwa=$(jq -r '.[].summary.pwa'                         <<< '${{ steps.treosh-lhci-action.outputs.manifest }}' | awk '{ sum+=$1; qtd+=1 } END {print (sum/qtd)*100"%"}' || echo '-')
        
        _log "Performance: $(_summaryColor $avg_performance)"
        _log "Aaccessibility: $(_summaryColor $avg_accessibility)"
        _log "Best practices: $(_summaryColor $avg_best_practices)"
        _log "SEO: $(_summaryColor $avg_seo)"
        _log "PWA: $(_summaryColor $avg_pwa)"
        
        ## Metrics (AVG)
        all_json_path=$(jq -r '.[].jsonPath' <<< '${{ steps.treosh-lhci-action.outputs.manifest }}')
        
        for file in $all_json_path; do
          _log "Get info from file $file..."
        done
        
        
